---
Parameters:
  KeyName:
    Description: coloque o nome da chave para a EC2, lembre-se de criar a chave com o mesmo nome
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-a4c7edb2 ##amzn-ami-hvm-2017.03.1.20170623-x86_64-gp2 
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: |
           #!/bin/bash
           yum update -y
           yum install -y httpd24 php56 mysql55-server php56-mysqlnd
           service httpd start
           chkconfig httpd on
           groupadd www
           usermod -a -G www ec2-user
           chown -R root:www /var/www
           chmod 2775 /var/www
           find /var/www -type d -exec chmod 2775 {} +
           find /var/www -type f -exec chmod 0664 {} +
           echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
           echo "Bem-Vindo ao site" > /var/www/html/index.html
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0' 
          GroupSet:
          - Ref: ALLSecurityGroup       
          SubnetId: !Ref PubSubnet1
      Tags:
        -
          Key: Name
          Value: EC2ZINHA

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: IGWZINHO

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyVPC
      InternetGatewayId: !Ref myInternetGateway

  # an elastic IP for our instance
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MyInstance

  # our EC2 security group
  ALLSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: 
        Ref: MyVPC
      GroupName: SGZINHO
      GroupDescription: "Enable HTTP access via port 80 + SSH access"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'    
      Tags:
        -
          Key: Name
          Value: SGZINHO

# My VPC        
  MyVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: 'default'
      Tags:
        -
          Key: Name
          Value: VPCZINHA     

# My Subnets
  PrivSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        -
          Key: Name
          Value: 'subnet-priv-a' 
  PrivSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        -
          Key: Name
          Value: 'subnet-priv-b'
  PubSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        -
          Key: Name
          Value: 'subnet-pub-a' 
  PubSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        -
          Key: Name
          Value: 'subnet-pub-b'
  # Routing Tables
  # PRIVATE ROUTE
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: RT_Private
  PrivateRoute1:   # Private route table direciona para o NAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # NAT Gateway:
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddressForNAT.AllocationId
      SubnetId: !Ref PubSubnet1
      Tags:
      - Key: Name
        Value: 'NAT-GW'
  ElasticIPAddressForNAT:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  # PUBLIC ROUTE TABLE
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: RT_Public
  PublicRoute1:   # Public route table direciona para o IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
  
  # Attach the public subnets to public route tables,  
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRouteTable
    Properties:
      SubnetId: !Ref PubSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRouteTable
    Properties:
      SubnetId: !Ref PubSubnet2
      RouteTableId: !Ref PublicRouteTable

 # Attach the private subnets to private route tables,   
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PrivateRouteTable
    Properties:
      SubnetId: !Ref PrivSubnet2
      RouteTableId: !Ref PrivateRouteTable
